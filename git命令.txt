reset：重新开始

git branch bugFix：创建新的分支
git commit：在新的分支里提交东西
git checkout <name>：切换到新的分支上
git commit：提交
git checkout -b <your-branch-name>：创建新的分支同时切换到新创建的分支上

3.
git merge：合并之前的分支（包含之前所有的提交记录）
git merge bugFix：将bugFix合并到main
git checkout bugFix：切换到bugFix
git merge mian：将main合并到bugFix
创建新的分支，切换到该分支，提交，切换回main，提交，用git merge 把bugFix合并到main
4.
git rebase ：合并分支（复制）
git rebase main：将想要移动的分支里的工作移动main分支，但是两者是并行的
git rebase bugFix：将main的东西复制到bugFix分支

新建分支并切换到分支上，提交，切换会main分支，提交，切换回bugFix 复制到main上
5.
HEAD是一个对当前检出记录的符号引用，指向你正在的一个基础上进行工作的提交记录。
HEAD是指向当前分支上最近一次提交记录。
HEAD通常情况下是指向分支名的，在提交的时候，改变了分支的状态，这个变化是可以通过HEAD变得可见的。
git checkout C1：切换到C1
git checkout main：切换到main
git commit：提交
git checkout C2：切换到C2
cat.git/HEAD：查看HEAD的指向
git symbolic-ref HEAD：查看HEAD指向的一个引用
分离HEAD是让它指向某个具体的提交记录而不是分支名
HEAD→main→C1
HEAD指向main，main指向C1
git checkout C1：切换到C1
从bugFix分支中分离出HEAD并让其指向一个提交记录

6.相对引用
git log：查看提交记录的哈希值
使用^向上移动提交一个记录
使用~<num>向上移动多个提交记录
git checkout main^：切换到main的父节点
main^相当于“main的父节点”，main^^是main的第二个父节点
git checkout C1：切换到C1
git checkout HEAD^：使用HEAD^向上移动
切换到bugFix的父节点，进入分离HEAD的状态
7.
“~”操作符
操作符后面可以跟数字，数字几就表示向上移动多少次
git checkout HEAD~4：一次性后退四步
强制修改分支位置
使用-f选项让分支指向另一个提交
git branch -f main HEAD ~3：将main分支强制指向HEAD的第三级父提交
移动HEAD，main和bugFix到目标所示的位置
main在C6，HEAD在C1，bugFix在C0
git branch -f main C6
git checkout HEAD~1
git branch -f bugFix HEAD~1    /git branch -f bugFix c0

8.撤销变更
git revert：远程撤销变更，可远程使用撤销更改并分享给别人
git revert HEAD：
git reset：本地撤销变更，只对本地分支有效。通过把分支记录回退几个提交记录来实现撤销改动。向上撤销，原来指向的提交记录就跟从来没有提交过的一样。
git reset HEAD~1：移回原来的地方，本地代码库不知道有提交的
在reset后，C2所作的变更还在，但是处于未加入暂存区状态。
分别撤销local分支和pushed分支上的最近一次提交，共需要撤销两个提交。
pushed是远程分支，local是本地分支。
git reset HEAD~1：本地撤销
git checkout pushed：切换到pushed
git revert HEAD：远程撤销

9.整理提交记录
git cherry-pick<提交号>
git cherry-pick c2 c4：将要提交的记录放在当前的分支下
将三个分支中的提交记录复制到main上，
main放在c7，another在c7，side在c5，bugFix在c3

10.交互式的rebase
可以利用rebase从一系列的提交记录中找到想要的记录
交互式 rebase 指的是使用带参数 --interactive 的 rebase 命令, 简写为 -i
在rebase UI 界面可以
调整提交记录的顺序（通过鼠标拖放来完成）
删除不想要的提交（通过切换pick的状态来完成，关闭就意味着不想要这个提交记录）
合并提交
git rebase -i HEAD~4：出现交互对话框
做一次交互的rebase，整理成目标窗口中的提交顺序，可以使用undo、reset修正错误        c3c5c4
 
11.本地栈式提交

git rebase -i+提交号：对提交记录进行重新排序
git cherry-pick+提交号
确保main分支能得到bugFix分支上的相关提交

12.提交的技巧#1
先用 git rebase -i 将提交重新排序，然后把我们想要修改的提交记录挪到最前
然后用 git commit --amend 来进行一些小修改
接着再用 git rebase -i 来将他们调回原来的顺序
最后我们把 main 移到修改的最前端（用你自己喜欢的方法），就大功告成啦！

13.提交技巧#2
git cherry-pick+提交号
cherry-pick可以将提交树上任何地方的提交记录取过来追加在HEAD 上（只要不是HEAD上游的提交就没问题）
通过--amend改变提交记录c2，但不能用rebase -i

14.Git Tags
git tag v1 c1：先建立一个标签指向c1
建立两个标签，然后切换到v1上，注意会进入到分离HEAD的状态，是因为不能再直接再v1上面做commit

15.Git  Describe
由于标签再代码库中起着“锚点”的作用，git describe用来描述离你最近的锚点（标签）
git bisect：一个查找产生bug的提交记录的指令
git describe<ref>：<ref>可以是任何能被git识别成提交记录的引用，如果没有指向的话，git会以目前所检出的位置（HEAD）
<tag>_<numCommits>_g<hash>
tag 表示的是离 ref 最近的标签， numCommits 是表示这个 ref 与 tag 相差有多少个提交记录， hash 表示的是你所给定的 ref 所表示的提交记录哈希值的前几位。
当ref提交记录上有某个标签时，就只输出标签名称
git tag v2 c3：在c3放一个v2的标签

git describe main 会输出：

v1_2_gC2

git describe side 会输出：

v2_1_gC4

16.
多分支rebase

git rebase main bugFix
git rebase bugFix side
git rebase side another
git rebase another main

17.
选择父提交记录
操作符“^"和“~”一样，后面可以跟一个数字
这个操作符是指定合并提交记录的某个父提交
git checkout main^：不加数字修改符直接检出main^，会回到第一个父提交记录，正上方的父
git checkout main^2：回到另一个父上
使用 ^ 和 ~ 可以自由地在提交树中移动
git checkout HEAD~^2~2：链式操作，只用一条命令和前面一样的结果
在指定的目标位置创建一个新的分支

18.
one需要重新排序并删除c5，two需要重新排序，three需要提交一次

19.
远程仓库
git clone：该命令用于远程仓库配置环境，在本地创建一个远程仓库的拷贝
origin/main：远程分支，分支叫“main”，远程仓库默认名叫“origin”
格式：<remote name>/<branch name>
git checkout o/main
git commit
在main分支上做一次提交，然后检出o/main，提交

20.
git fetch：从远程仓库获取数据
Git 远程仓库相当的操作实际可以归纳为两点：向远程仓库传输数据以及从远程仓库获取数据。

git fetch 完成了仅有的但是很重要的两步:
从远程仓库下载本地仓库中缺失的提交记录
更新远程分支指针(如 o/main)
git fetch 不会改变本地仓库的而状态，不会更新main分支，不会修改磁盘上的文件

21.下载

git pull：从远程仓库下载并合并这个提交记录的更新
git fetch:从远程仓库下载
git merge o/main：合并这个提交记录
此刻的main分支包含了远程仓库的更新

22.
团队合作
git fakeTeamwork：默认操作在远程仓库main分支上做一次提交
git fetch：从远程仓库下载提交的记录
git fakeTeamwork foo 3：指定提交的分支或者数量
克隆一个远程仓库（git clone），在创建的远程仓库中模拟一些修改，然后再本地分支做一些提交，再拉取远程仓库的变更

23.上传
git push：负责将变更的记录上传到指定的远程仓库，并在远程仓库上合并新的提交记录
向远程仓库分享两个提交记录

24.
偏离的工作解决方法
git fetch：更新本地仓库中的远程分支
git rebase +分支：将工作移动到最新的提交记录下
git push：上传到远程仓库
git merge：创建新的合并提交但是不会移动你的工作
git pull --rebase是fetch和rebase的简写

克隆仓库，模拟一次远程提交（fakeTeamwork），完成一次本地提交，用rebase发布

25.
远程服务器拒绝
可能是main被锁定了，需要一些pull request流程来合并修改

远程服务器拒绝直接推送(push)提交到main, 因为策略配置要求 pull requests 来提交更新.
你应该按照流程,新建一个分支, 推送(push)这个分支并申请pull request,但是你忘记并直接提交给了main.现在你卡住并且无法推送你的更新。
新建一个分支feature，推送（push）到远程服务器，然后reset你的main分支和远程服务器保持一致
git reset --hard o/main
git checkout -b feature c2
git push origin feature

26.
合并特性分支
git pull --rebase ：更新本地仓库的远程分支并将工作移交到最新的工作记录下
git push
三个特性分支分别为——side1 side2  side3，将三个分支按顺序推送到远程仓库，把工作合并过来

27.
rebase的优点：所有的提交都在一条线上
rebase的缺点：修改了提交树的历史

git checkout main
git pull
git merge side1
git merge side2
git merge side3
git push

28.
远程跟踪分支
pull 操作时, 提交记录会被先下载到 o/main 上，之后再合并到本地的 main 分支。隐含的合并目标由这个关联确定的。
push 操作时, 我们把工作从 main 推到远程仓库中的 main 分支(同时会更新远程分支 o/main) 。这个推送的目的地也是由这种关联确定的！	
main和o/main的关联关系就是由分支的“remote tracking"属性决定的
git checkout -b totallyNotMain o/main：创建一个名为totallyNotMain的分支，他跟踪远程分支”o/main“
第一种方法
git checkout -b foo o/main；git pull
git checkout -b foo o/main；git commit；git push
第二种方法
另一种设置远程追踪分支的方法就是使用：git branch -u 命令，执行：

git branch -u o/main foo
这样 foo 就会跟踪 o/main 了。如果当前就在 foo 分支上, 还可以省略 foo：
git branch -u o/main
不检出main分支的情况下将工作推送到远程仓库中的main分支上
git checkout -b side o/main
git commit
git pull --rebase
git push
新建一个分支feature, 推送到远程服务器. 然后reset你的main分支和远程服务器保持一致, 否则下次你pull并且他人的提交和你冲突的时候就会有问题.

29.
推送主分支
git pull --rebase：将工作记录移交到远程分支的最新提交记录

git checkout -b side o/main
git commit
git pull --rebase
git push

30.git push的参数
git push <remote><place>
git push origin main：切到本地仓库中的“main”分支，获取所有的提交，再到远程仓库“origin”中找到“main”分支，将远程仓库中没有的提交记录都添加上去，搞定之后告诉我。
git checkout c0；git push origin main：
更新远程仓库foo和main，用origin

31.
<place>参数详解
当为git push指定place参数为main时，我们同时指定了提交记录的来源和去向
要同时为源和目的地指定 <place> 的话，只需要用冒号 : 将二者连起来就可以了：
git push origin <source>:<destination>

git push origin foo^:main
git push origin main:newBranch：要推送的目的分支不存在，会自动创建一个


32.
git fetch origin main~1:foo
git fetch origin foo:main
git checkout foo
git merge main

33.
古怪的<source>
git push origin :foo ：用push传空值source，删除远程仓库的foo分支
git fetch origin :bar ：用fetch空到本地，会在本地创建一个新分支
删除一个远程分支，在本地创建一个新分支

34.

git pull是fetch后跟merge的缩写

git pull origin foo 相当于git fetch origin foo; git merge o/foo

git pull origin bar~1:bugFix 相当于git fetch origin bar~1:bugFix; git merge bugFix

git pull origin main：指定main更新了o/main，然后合并到检出的位置

git pull origin main:foo：在本地创建foo分支，从远程仓库中的main分支中下载提交记录，然后合并到foo，在合并到检出的分支上

下载一些提交，然后创建一些新分支，再合并分支到其他分支

git pull origin bar:foo
git pull origin main:side
